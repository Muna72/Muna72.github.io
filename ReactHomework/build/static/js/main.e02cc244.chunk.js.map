{"version":3,"sources":["logo.svg","CountryCard.jsx","CountryList.jsx","CountryApp.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CountryCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","countryData","_this2","fetch","concat","countryCode","then","r","json","data","setState","react_default","a","createElement","className","src","flag","alt","id","name","population","area","languages","map","lang","key","Component","CountryList","countryCodeArray","region","nextProps","_this3","console","log","countriesInRegion","d","src_CountryCard_0","alpha3Code","CountryApp","countrySelect","event","selectedRegion","target","value","regions","onChange","bind","src_CountryList","Boolean","window","location","hostname","match","ReactDOM","render","src_CountryApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e02cc244.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './CountryCard.css';\r\nimport \"./App.css\";\r\n\r\nclass CountryCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countryData: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://restcountries.eu/rest/v2/alpha/${this.props.countryCode}`)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                this.setState({countryData: data})\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.countryData !== null) {\r\n            return (\r\n                <div className=\"countryDetails\">\r\n                    <div className=\"countries\">\r\n                    <img src={this.state.countryData.flag} alt=\"\" id=\"pics\" />\r\n                    <h2>{this.state.countryData.name}</h2>\r\n                    </div>\r\n                <span>Name: {this.state.countryData.name}</span><br />\r\n                <span>Population: {this.state.countryData.population}</span><br />\r\n                <span>Area: {this.state.countryData.area}</span><br />\r\n                <span>Languages:</span><br />\r\n                    <ol >\r\n                        {this.state.countryData.languages.map(lang =>\r\n                        <li key={lang.name}>{lang.name}</li>)}\r\n                    </ol>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div>\r\n                <p>No country data</p>\r\n            </div>\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./CountryCard.css\";\r\nimport CountryCard from \"./CountryCard\";\r\n\r\nclass CountryList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countryCodeArray: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\r\n            `https://restcountries.eu/rest/v2/region/${\r\n                this.props.region\r\n                }?fields=alpha3Code`\r\n        )\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                this.setState({ countryCodeArray: data });\r\n            });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"cWRP: \", nextProps);\r\n        fetch(\r\n            `https://restcountries.eu/rest/v2/region/${\r\n                nextProps.region\r\n                }?fields=alpha3Code`\r\n        )\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                this.setState({ countryCodeArray: data });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        // should be a list of country codes for the region\r\n        if (this.state.countryCodeArray !== null) {\r\n            const countriesInRegion = this.state.countryCodeArray.map(d => (\r\n                <CountryCard key={d.alpha3Code} countryCode={d.alpha3Code} />\r\n            ));\r\n            // <CountryCard countryCode=\"can\" />\r\n            return (\r\n                <div className=\"CountryList\">\r\n                    <div id=\"countriesInRegion\">{countriesInRegion}</div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <p>No country data</p>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default CountryList;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport CountryList from './CountryList';\r\n\r\nclass CountryApp extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            regions: [\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"],\r\n            selectedRegion: \"Africa\"\r\n        }\r\n    }\r\n\r\n    countrySelect = event => {\r\n        this.setState({ selectedRegion: event.target.value });\r\n        console.log(\"Changed to: \" + event.target.value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CountryApp\">\r\n                <form className=\"center\">\r\n                    Select a Region of Interest:\r\n                    <select name=\"region\" onChange={this.countrySelect.bind(this)}>\r\n                        {this.state.regions.map(region =>\r\n                        <option value={region}>{region}</option>\r\n                        )};\r\n                    </select>\r\n                </form>\r\n                <div className=\"countryContainer\">\r\n                    <CountryList region={this.state.selectedRegion} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CountryApp from './CountryApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CountryApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}